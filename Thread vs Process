Q1. Diff between Thread and Process
Ans. Here is the analogy I use in Linux Kernel Development.
Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources,
an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor,
a stack, and program state. Put another way, processes are running binaries and threads are
the smallest unit of execution schedulable by an operating system's process scheduler.

A process contains one or more threads. In single-threaded processes, the process contains one thread. 
You can say the thread is the process—there is one thing going on. In multithreaded processes,
the process contains more than one thread—there's more than one thing going on.

The two primary virtualized abstractions in modern operating systems are virtualized memory and a 
virtualized processor. Both afford the illusion to running processes that they alone consume the machine's resources.
Virtualized memory gives processes a unique view of memory that seamlessly maps back to physical
RAM or on-disk storage (swap space). A virtualized processor lets processes act as if they alone
run on a processor, when in fact multiple processes are multitasking across multiple processors.

Source: http://www.quora.com/What-is-the-difference-between-a-process-and-a-thread

Q2. Difference between Mutes and Semaphores ?
Ans. Source: 
http://stackoverflow.com/questions/62814/difference-between-binary-semaphore-and-mutex
http://www.quora.com/What-is-the-difference-between-a-mutex-and-a-semaphore
